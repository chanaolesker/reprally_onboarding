-- Supabase Database Setup for Store Types
-- Run this in your Supabase SQL Editor

-- Create the store_types table
CREATE TABLE IF NOT EXISTS store_types (
  id SERIAL PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE,
  display_name VARCHAR(100) NOT NULL
);

-- Insert the predefined store types
INSERT INTO store_types (name, display_name) VALUES
  ('convenience', 'Convenience Store'),
  ('foodservice', 'Food Service'),
  ('gas', 'Gas Station'),
  ('grocery', 'Grocery Store'),
  ('gym', 'Gym'),
  ('liquor', 'Liquor Store'),
  ('tobacco_smoke', 'Tobacco & Smoke Shop'),
  ('other', 'Other')
ON CONFLICT (name) DO NOTHING;

-- Create the stores table
CREATE TABLE IF NOT EXISTS stores (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name TEXT NOT NULL,
  google_place_id TEXT NULL,
  latitude DOUBLE PRECISION NULL,
  longitude DOUBLE PRECISION NULL,
  state TEXT NULL,
  type BIGINT NULL,
  google_rating REAL NULL,
  google_rating_count BIGINT NULL,
  CONSTRAINT stores_pkey PRIMARY KEY (id),
  CONSTRAINT stores_type_fkey FOREIGN KEY (type) REFERENCES store_types (id) ON UPDATE CASCADE ON DELETE SET NULL
) TABLESPACE pg_default;

-- Enable Row Level Security (RLS) if needed
ALTER TABLE store_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE stores ENABLE ROW LEVEL SECURITY;

-- Create policies that allow anonymous users to read data
CREATE POLICY "Allow anonymous read access to store_types" ON store_types
  FOR SELECT USING (true);

CREATE POLICY "Allow anonymous read access to stores" ON stores
  FOR SELECT USING (true);

-- Allow authenticated users to insert stores
CREATE POLICY "Allow authenticated users to insert stores" ON stores
  FOR INSERT WITH CHECK (true);

-- Allow authenticated users to update stores
CREATE POLICY "Allow authenticated users to update stores" ON stores
  FOR UPDATE USING (true);

-- Verify the data was inserted
SELECT * FROM store_types;

-- Verify the stores table structure
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'stores' 
ORDER BY ordinal_position;